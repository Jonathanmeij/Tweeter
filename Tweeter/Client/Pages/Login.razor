@page "/login"
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@using Tweeter.Shared.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager

<div class="">
    <div class="flex flex-col items-center justify-center h-screen gap-10">
        <img src="Images/Icons/kiwi.svg" alt="Kiwi" class="mx-auto " />

        <div class="flex flex-col w-full max-w-xs gap-4 text">

            <h3 class="text-3xl font-semibold">Sign in to Tweeter</h3>

            @if(!string.IsNullOrEmpty(error))
            {
                <p class="p-2 text-red-500 border border-red-500 rounded bg-red-500/20 ">@error</p>
            }
            
            <EditForm   Model="user" OnSubmit="HandleLogin"  >
                <div class="flex flex-col w-full gap-2">
                    <div class="flex flex-col w-full">
                        <label  for="email">Email</label>
                        <InputText class="w-full p-2 border rounded-md bg-slate-950 border-slate-700 focus:ring-blue-500 focus:ring-2 focus:outline-none " id="email" @bind-Value="user.Email" />
                    </div>
                    <div class="flex flex-col">
                        <label for="password">Password</label>
                        <InputText class="p-2 border rounded-md bg-slate-950 border-slate-700 focus:ring-blue-500 focus:ring-2 focus:outline-none " type="password" id="password" @bind-Value="user.Password" />
                    </div>
                </div>
            </EditForm>
        
            <Button OnClickCallback="HandleLogin" Color="text-black bg-white hover:bg-slate-100">Login</Button>
        </div>

        <div class="flex flex-col w-full max-w-xs gap-4 ">
            <p class="text-sm ">Don't have an account? <a href="/register" class="text-blue-500">Sign up</a></p>
        </div>
    </div>
</div>

@code {
    LoginRequest user = new LoginRequest();
    private string error = string.Empty;
    
    async Task HandleLogin()
    {
        var result = await Http.PostAsJsonAsync("/api/auth/login", user);

        if(!result.IsSuccessStatusCode)
        {
            error = "Invalid username or password";
            return;
        }

        var response = await result.Content.ReadFromJsonAsync<LoginResponse>();
        var token = response.Token;
        
        await LocalStorageService.SetItemAsync("token", token);
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");
    }
}